version: '4'

# services:
#   mysql:
#     image: mysql:8.0
#     environment:
#       MYSQL_ROOT_PASSWORD: root
#       MYSQL_DATABASE: chatgpt
#       MYSQL_USER: root
#     ports:
#       - "8889:8889"
#     volumes:
#       - mysql-data:/var/lib/mysql

#   app:
#     build: .
#     environment:
#       SPRING_DATASOURCE_URL: jdbc:mysql://mysql:8889/chatgpt
#       SPRING_DATASOURCE_USERNAME: root
#       SPRING_DATASOURCE_PASSWORD: root
#     ports:
#       - "8080:8080"
#     depends_on:
#       - mysql

# volumes:
#   mysql-data:
services:
  database:
    image: mysql:latest
    restart: always
    volumes:
      - ./db:/var/lib/mysql
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: chatgpt
      MYSQL_USER: chatgpt
      MYSQL_PASSWORD: chatgpt
      MYSQL_DATABASE: chatgpt
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
  app:
    build: .
    environment:
      DB_HOST: database
      DB_PORT: 3306
      DB_DATABASE: chatgpt
      DB_USER: chatgpt
      DB_PASSWORD: chatgpt
    depends_on:
      database:
        condition: service_healthy
    # command: ["./wait-for-it.sh", "database:3306", "--", "java", "-jar", "/app.jar"]
    volumes:
      - .:/app
    ports:
      - "8080:8080"

# version: '3'
# services:
#   database:
#     image: mysql:latest
#     restart: always
#     volumes:
#       - ./db:/var/lib/mysql
#     environment:
#       MYSQL_ROOT_USER: root
#       MYSQL_ROOT_PASSWORD: chatgpt
#       MYSQL_USER: chatgpt
#       MYSQL_PASSWORD: chatgpt
#       MYSQL_DATABASE: chatgpt
#     ports:
#       - "3306:3306"
#     networks:
#       - backend-network
#   app:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     environment:
#       DB_HOST: database
#       DB_PORT: 3306
#       DB_DATABASE: chatgpt
#       DB_USER: chatgpt
#       DB_PASSWORD: chatgpt
#     ports:
#       - "8080:8080"
#     networks:
#       - backend-network
# networks:
#   backend-network:
#     driver: bridge
# volumes:
#    mysql-data:
